source /home/node/app/docker/my-dojo/.env

export HOST_IP=$(ip -4 route list match 0/0 | awk '{print $3}')
export LOCAL_IP=$(hostname -i)

export BITCOIND_TYPE=$(yq e '.bitcoin-node.type' /root/start9/config.yaml)
export BITCOIND_IP="${BITCOIND_TYPE}.embassy"
export BITCOIND_RPC_USER=$(yq e '.bitcoin-node.username' /root/start9/config.yaml)
export BITCOIND_RPC_PASSWORD=$(yq e '.bitcoin-node.password' /root/start9/config.yaml)
export BITCOIND_ZMQ_BLK_HASH=28332
export BITCOIND_ZMQ_RAWTXS=28333

if [ "$BITCOIND_TYPE" = "bitcoind-testnet" ]; then
	export COMMON_BTC_NETWORK=testnet
	export BITCOIND_RPC_PORT=48332
else
	export COMMON_BTC_NETWORK=mainnet
	export BITCOIND_RPC_PORT=8332
fi

export MYSQL_USER=samourai
export MYSQL_PASSWORD=samourai
export MYSQL_DATABASE=samourai-main

export NET_DOJO_MYSQL_IPV4=127.0.0.1

# API key required for accessing the services provided by the server
# Keep this API key secret!
# Provide a value with a high entropy!
# Type: alphanumeric
export NODE_API_KEY=$(yq e '.api-key' /root/start9/config.yaml)

# API key required for accessing the admin/maintenance services provided by the server
# Keep this Admin key secret!
# Provide a value with a high entropy!
# Type: alphanumeric
export NODE_ADMIN_KEY=$(yq e '.admin-key' /root/start9/config.yaml)

# BIP47 Payment Code used for admin authentication
# Type: alphanumeric
export NODE_PAYMENT_CODE=$(yq e '.payment-code' /root/start9/config.yaml)

# Secret used by the server for signing Json Web Token
# Keep this value secret!
# Provide a value with a high entropy!
# Type: alphanumeric
export NODE_JWT_SECRET=$(yq e '.jwt-secret' /root/start9/config.yaml)

# FEE TYPE USED FOR FEES ESTIMATIONS BY BITCOIND
# Allowed values are ECONOMICAL or CONSERVATIVE
export NODE_FEE_TYPE=ECONOMICAL

# Indexer or third-party service used for imports and rescans of addresses
export S9_INDEXER_TYPE=$(yq e '.indexer.type' /root/start9/config.yaml)

# Values: local_bitcoind | local_indexer | third_party_explorer
export NODE_ACTIVE_INDEXER=local_indexer
export INDEXER_IP=${S9_INDEXER_TYPE}.embassy # fulcrum or electrs
export INDEXER_RPC_PORT=50001
export INDEXER_BATCH_SUPPORT=active
export INDEXER_PROTOCOL=tcp

export NET_DOJO_TOR_IPV4=${HOST_IP}
export TOR_SOCKS_PORT=9050

# This value is necessary to make dojo use the external explorer
export EXPLORER_INSTALL=on

# Soroban configuration
export SOROBAN_INSTALL=on
SOROBAN_ANNOUNCE_CONFIG=$(yq e '.soroban-announce' /root/start9/config.yaml)
if [ "$SOROBAN_ANNOUNCE_CONFIG" == "enabled" ]; then
    export SOROBAN_ANNOUNCE=on
    # PandoTx Process is only available when Soroban announce is enabled
    export NODE_PANDOTX_PROCESS=$(yq e '.soroban-announce.pandotx-process' /root/start9/config.yaml | sed 's/true/on/; s/false/off/')
else
    export SOROBAN_ANNOUNCE=off
    export NODE_PANDOTX_PROCESS=off
fi

# PandoTx configuration (push is always available)
export NODE_PANDOTX_PUSH=$(yq e '.pandotx-push' /root/start9/config.yaml | sed 's/true/on/; s/false/off/')
export NODE_PANDOTX_NB_RETRIES=$(yq e '.pandotx-retries' /root/start9/config.yaml)
export NODE_PANDOTX_FALLBACK_MODE=$(yq e '.pandotx-fallback-mode' /root/start9/config.yaml)

# Soroban networking
export NET_DOJO_SOROBAN_IPV4=${LOCAL_IP}
export SOROBAN_PORT=3400

# Soroban P2P configuration
export SOROBAN_P2P_LISTEN_PORT=9042
export SOROBAN_P2P_LOWWATER=64
export SOROBAN_P2P_HIGHWATER=128
export SOROBAN_P2P_PEERSTORE_FILE=/home/soroban/data/peerstore.json

# Soroban Gossip configuration
export SOROBAN_GOSSIP_D=8
export SOROBAN_GOSSIP_DLO=6
export SOROBAN_GOSSIP_DHI=12
export SOROBAN_GOSSIP_DOUT=2
export SOROBAN_GOSSIP_DSCORE=4
export SOROBAN_GOSSIP_DLAZY=6
export SOROBAN_GOSSIP_PRUNE_PEERS=16
export SOROBAN_GOSSIP_LIMIT=4096

# Soroban IPC configuration
export SOROBAN_IPC_CHILD_COUNT=4
export SOROBAN_IPC_NATS_PORT=4222

# Soroban logging
export SOROBAN_LOG_LEVEL=info

# Soroban DHT server mode
export SOROBAN_DHT_SERVER_MODE=off

# Soroban network-specific configuration
export SOROBAN_P2P_BOOTSTRAP_MAIN="QmXpGEtg7vEK5dDm6U6fTgq2L48MzFrPBdWz2Bh2CqyPmw"
export SOROBAN_DOMAIN_MAIN="bitcoin.dojo.network"
export SOROBAN_P2P_ROOM_MAIN="bitcoin-mainnet"
export SOROBAN_ANNOUNCE_KEY_MAIN="soroban.cluster.mainnet.nodes"

export SOROBAN_P2P_BOOTSTRAP_TEST="QmSVeV3ZA4LqGFGCBpNY6gtyJ5aPJtgF8FMuKGBdFbKhSD"
export SOROBAN_DOMAIN_TEST="bitcoin.dojo.network"
export SOROBAN_P2P_ROOM_TEST="bitcoin-testnet"
export SOROBAN_ANNOUNCE_KEY_TEST="soroban.cluster.testnet.nodes"

# Soroban onion file (if announce is enabled)
export SOROBAN_ONION_FILE=/var/lib/tor/hsv3soroban/hostname
